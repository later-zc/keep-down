// .vitepress/config.mts
import { defineConfig } from "file:///C:/Users/Administrator/Desktop/keep-down/node_modules/vitepress/dist/node/index.js";

// .vitepress/nav.ts
var nav_default = [
  {
    text: "\u524D\u7AEF\u8DEF\u6F2B\u6F2B",
    items: [
      {
        text: "\u8BED\u8A00\u6846\u67B6\u57FA\u7840",
        link: "/front-end/\u8BED\u8A00\u6846\u67B6\u57FA\u7840/READEME.md",
        activeMatch: "/front-end/\u8BED\u8A00\u6846\u67B6\u57FA\u7840/"
      },
      {
        text: "\u5751\u5751\u6D3C\u6D3C\u4E0D\u5C11",
        link: "/front-end/\u5751\u5751\u6D3C\u6D3C\u4E0D\u5C11/READEME.md",
        activeMatch: "/front-end/\u5751\u5751\u6D3C\u6D3C\u4E0D\u5C11/"
      }
    ]
  },
  {
    text: "\u540E\u7AEF\u5176\u4FEE\u8FDC\u516E",
    items: [
      {
        text: "Java",
        link: "/back-end/java/READEME.md",
        activeMatch: "/back-end/java/"
      }
    ]
  }
];

// .vitepress/sidebar.ts
import path2 from "node:path";

// src/utils/fileUtil.ts
import fs from "node:fs";
import path from "node:path";
function getAllFiles(dir, { filter, fileList = [] } = {}) {
  const files = fs.readdirSync(dir);
  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    if (filter) {
      if (typeof filter === "string" && file.includes(filter)) {
        return;
      }
      if (filter instanceof RegExp && filter.test(filePath)) {
        return;
      }
    }
    if (stat.isDirectory()) {
      getAllFiles(filePath, { fileList, filter });
    } else {
      fileList.push(filePath);
    }
  });
  return fileList;
}

// .vitepress/sidebar.ts
var __vite_injected_original_dirname = "C:\\Users\\Administrator\\Desktop\\keep-down\\.vitepress";
var sidebar = {};
var sidebarDirConfigList = [
  "/front-end/\u8BED\u8A00\u6846\u67B6\u57FA\u7840",
  "/front-end/\u5751\u5751\u6D3C\u6D3C\u4E0D\u5C11",
  "/back-end/java"
];
sidebarDirConfigList.forEach((sidebarItem) => {
  const sidebarItemDirectoryPath = path2.join(__vite_injected_original_dirname, `../src${sidebarItem}`);
  const sidebarItemAllFiles = getAllFiles(sidebarItemDirectoryPath, {
    filter: /assets|READEME/i
  });
  const sep = path2.sep.replace(/\\/g, "\\\\");
  const regex = new RegExp(`${sep}src(?<relativePath>.*)`);
  const relativePaths = sidebarItemAllFiles.map(
    (filePath) => filePath?.match(regex)?.groups?.relativePath ?? filePath
  );
  const fileNameRegex = new RegExp(`(?<directory>[^${sep}]+)${sep}(?<fileName>[^${sep}]+(?=.md$))`);
  const fileNames = relativePaths.map((i) => ({
    link: i.replace(/\\/g, "/"),
    // 转换成/以匹配url
    ...i?.match(fileNameRegex)?.groups
  }));
  sidebar[sidebarItem] = [
    {
      items: fileNames.reduce((pre, cur) => {
        if (cur.directory && !pre.includes(cur.directory)) {
          pre.push(cur.directory);
        }
        return pre;
      }, []).map((i) => ({
        text: i,
        collapsed: true,
        items: fileNames.filter((j) => j.directory === i).map((j) => ({
          text: j.fileName,
          link: j.link
        }))
      }))
    }
  ];
});
var sidebar_default = sidebar;

// .vitepress/config.mts
var config_default = defineConfig({
  title: "later-zc notes",
  description: "later-zc \u7684\u77E5\u8BC6\u7B14\u8BB0\uFF0C\u5305\u542B\u524D\u540E\u7AEF\u5E38\u7528\u57FA\u7840\u77E5\u8BC6\u3001\u8E29\u5751\u8BB0\u5F55\u3001\u5F00\u53D1\u5FC3\u5F97\u7B49",
  srcDir: "./src",
  base: "/keep-down/",
  head: [["link", { rel: "icon", href: "/keep-down/favicon.ico" }]],
  cleanUrls: true,
  ignoreDeadLinks: true,
  markdown: {
    container: {
      tipLabel: "\u63D0\u793A",
      warningLabel: "\u6CE8\u610F",
      dangerLabel: "\u8B66\u544A",
      infoLabel: "\u4FE1\u606F",
      detailsLabel: "\u8BE6\u7EC6\u4FE1\u606F"
    },
    image: {
      lazyLoading: true
      // 默认禁用图片懒加载
    }
  },
  themeConfig: {
    // https://vitepress.dev/reference/default-theme-config
    nav: nav_default,
    sidebar: sidebar_default,
    outline: {
      label: "\u76EE\u5F55",
      level: [1, 6]
    },
    lastUpdated: {
      text: "\u6700\u8FD1\u66F4\u65B0\u4E8E",
      formatOptions: {
        dateStyle: "full",
        timeStyle: "medium"
      }
    },
    search: {
      provider: "local"
    },
    logo: "/logo.png",
    editLink: {
      pattern: "https://github.com/later-zc/keep-down/tree/main/src/:path",
      text: "\u5728 GitHub \u4E0A\u7F16\u8F91\u6B64\u9875"
    },
    socialLinks: [{ icon: "github", link: "https://github.com/later-zc/keep-down" }],
    footer: {
      message: "Released under the MIT License.",
      copyright: "Copyright \xA9 2024-present later-zc"
    }
  }
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLnZpdGVwcmVzcy9jb25maWcubXRzIiwgIi52aXRlcHJlc3MvbmF2LnRzIiwgIi52aXRlcHJlc3Mvc2lkZWJhci50cyIsICJzcmMvdXRpbHMvZmlsZVV0aWwudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxBZG1pbmlzdHJhdG9yXFxcXERlc2t0b3BcXFxca2VlcC1kb3duXFxcXC52aXRlcHJlc3NcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXEFkbWluaXN0cmF0b3JcXFxcRGVza3RvcFxcXFxrZWVwLWRvd25cXFxcLnZpdGVwcmVzc1xcXFxjb25maWcubXRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy9BZG1pbmlzdHJhdG9yL0Rlc2t0b3Ava2VlcC1kb3duLy52aXRlcHJlc3MvY29uZmlnLm10c1wiO2ltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGVwcmVzcydcclxuaW1wb3J0IG5hdiBmcm9tICcuL25hdidcclxuaW1wb3J0IHNpZGViYXIgZnJvbSAnLi9zaWRlYmFyJ1xyXG5cclxuLy8gaHR0cHM6Ly92aXRlcHJlc3MuZGV2L3JlZmVyZW5jZS9zaXRlLWNvbmZpZ1xyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4gIHRpdGxlOiAnbGF0ZXItemMgbm90ZXMnLFxyXG4gIGRlc2NyaXB0aW9uOiAnbGF0ZXItemMgXHU3Njg0XHU3N0U1XHU4QkM2XHU3QjE0XHU4QkIwXHVGRjBDXHU1MzA1XHU1NDJCXHU1MjREXHU1NDBFXHU3QUVGXHU1RTM4XHU3NTI4XHU1N0ZBXHU3ODQwXHU3N0U1XHU4QkM2XHUzMDAxXHU4RTI5XHU1NzUxXHU4QkIwXHU1RjU1XHUzMDAxXHU1RjAwXHU1M0QxXHU1RkMzXHU1Rjk3XHU3QjQ5JyxcclxuICBzcmNEaXI6ICcuL3NyYycsXHJcbiAgYmFzZTogJy9rZWVwLWRvd24vJyxcclxuICBoZWFkOiBbWydsaW5rJywgeyByZWw6ICdpY29uJywgaHJlZjogJy9rZWVwLWRvd24vZmF2aWNvbi5pY28nIH1dXSxcclxuICBjbGVhblVybHM6IHRydWUsXHJcbiAgaWdub3JlRGVhZExpbmtzOiB0cnVlLFxyXG4gIG1hcmtkb3duOiB7XHJcbiAgICBjb250YWluZXI6IHtcclxuICAgICAgdGlwTGFiZWw6ICdcdTYzRDBcdTc5M0EnLFxyXG4gICAgICB3YXJuaW5nTGFiZWw6ICdcdTZDRThcdTYxMEYnLFxyXG4gICAgICBkYW5nZXJMYWJlbDogJ1x1OEI2Nlx1NTQ0QScsXHJcbiAgICAgIGluZm9MYWJlbDogJ1x1NEZFMVx1NjA2RicsXHJcbiAgICAgIGRldGFpbHNMYWJlbDogJ1x1OEJFNlx1N0VDNlx1NEZFMVx1NjA2RidcclxuICAgIH0sXHJcbiAgICBpbWFnZToge1xyXG4gICAgICBsYXp5TG9hZGluZzogdHJ1ZSAvLyBcdTlFRDhcdThCQTRcdTc5ODFcdTc1MjhcdTU2RkVcdTcyNDdcdTYxRDJcdTUyQTBcdThGN0RcclxuICAgIH1cclxuICB9LFxyXG4gIHRoZW1lQ29uZmlnOiB7XHJcbiAgICAvLyBodHRwczovL3ZpdGVwcmVzcy5kZXYvcmVmZXJlbmNlL2RlZmF1bHQtdGhlbWUtY29uZmlnXHJcbiAgICBuYXYsXHJcbiAgICBzaWRlYmFyLFxyXG4gICAgb3V0bGluZToge1xyXG4gICAgICBsYWJlbDogJ1x1NzZFRVx1NUY1NScsXHJcbiAgICAgIGxldmVsOiBbMSwgNl0sXHJcbiAgICB9LFxyXG4gICAgbGFzdFVwZGF0ZWQ6IHtcclxuICAgICAgdGV4dDogJ1x1NjcwMFx1OEZEMVx1NjZGNFx1NjVCMFx1NEU4RScsXHJcbiAgICAgIGZvcm1hdE9wdGlvbnM6IHtcclxuICAgICAgICBkYXRlU3R5bGU6ICdmdWxsJyxcclxuICAgICAgICB0aW1lU3R5bGU6ICdtZWRpdW0nLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHNlYXJjaDoge1xyXG4gICAgICBwcm92aWRlcjogJ2xvY2FsJyxcclxuICAgIH0sXHJcbiAgICBsb2dvOiAnL2xvZ28ucG5nJyxcclxuICAgIGVkaXRMaW5rOiB7XHJcbiAgICAgIHBhdHRlcm46ICdodHRwczovL2dpdGh1Yi5jb20vbGF0ZXItemMva2VlcC1kb3duL3RyZWUvbWFpbi9zcmMvOnBhdGgnLFxyXG4gICAgICB0ZXh0OiAnXHU1NzI4IEdpdEh1YiBcdTRFMEFcdTdGMTZcdThGOTFcdTZCNjRcdTk4NzUnLFxyXG4gICAgfSxcclxuICAgIHNvY2lhbExpbmtzOiBbeyBpY29uOiAnZ2l0aHViJywgbGluazogJ2h0dHBzOi8vZ2l0aHViLmNvbS9sYXRlci16Yy9rZWVwLWRvd24nIH1dLFxyXG4gICAgZm9vdGVyOiB7XHJcbiAgICAgIG1lc3NhZ2U6ICdSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuJyxcclxuICAgICAgY29weXJpZ2h0OiAnQ29weXJpZ2h0IFx1MDBBOSAyMDI0LXByZXNlbnQgbGF0ZXItemMnXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pXHJcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxcQWRtaW5pc3RyYXRvclxcXFxEZXNrdG9wXFxcXGtlZXAtZG93blxcXFwudml0ZXByZXNzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxBZG1pbmlzdHJhdG9yXFxcXERlc2t0b3BcXFxca2VlcC1kb3duXFxcXC52aXRlcHJlc3NcXFxcbmF2LnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy9BZG1pbmlzdHJhdG9yL0Rlc2t0b3Ava2VlcC1kb3duLy52aXRlcHJlc3MvbmF2LnRzXCI7ZXhwb3J0IGRlZmF1bHQgW1xyXG4gIHtcclxuICAgIHRleHQ6ICdcdTUyNERcdTdBRUZcdThERUZcdTZGMkJcdTZGMkInLFxyXG4gICAgaXRlbXM6IFtcclxuICAgICAge1xyXG4gICAgICAgIHRleHQ6ICdcdThCRURcdThBMDBcdTY4NDZcdTY3QjZcdTU3RkFcdTc4NDAnLFxyXG4gICAgICAgIGxpbms6ICcvZnJvbnQtZW5kL1x1OEJFRFx1OEEwMFx1Njg0Nlx1NjdCNlx1NTdGQVx1Nzg0MC9SRUFERU1FLm1kJyxcclxuICAgICAgICBhY3RpdmVNYXRjaDogJy9mcm9udC1lbmQvXHU4QkVEXHU4QTAwXHU2ODQ2XHU2N0I2XHU1N0ZBXHU3ODQwLycsXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB0ZXh0OiAnXHU1NzUxXHU1NzUxXHU2RDNDXHU2RDNDXHU0RTBEXHU1QzExJyxcclxuICAgICAgICBsaW5rOiAnL2Zyb250LWVuZC9cdTU3NTFcdTU3NTFcdTZEM0NcdTZEM0NcdTRFMERcdTVDMTEvUkVBREVNRS5tZCcsXHJcbiAgICAgICAgYWN0aXZlTWF0Y2g6ICcvZnJvbnQtZW5kL1x1NTc1MVx1NTc1MVx1NkQzQ1x1NkQzQ1x1NEUwRFx1NUMxMS8nLFxyXG4gICAgICB9LFxyXG4gICAgXSxcclxuICB9LFxyXG4gIHtcclxuICAgIHRleHQ6ICdcdTU0MEVcdTdBRUZcdTUxNzZcdTRGRUVcdThGRENcdTUxNkUnLFxyXG4gICAgaXRlbXM6IFtcclxuICAgICAge1xyXG4gICAgICAgIHRleHQ6ICdKYXZhJyxcclxuICAgICAgICBsaW5rOiAnL2JhY2stZW5kL2phdmEvUkVBREVNRS5tZCcsXHJcbiAgICAgICAgYWN0aXZlTWF0Y2g6ICcvYmFjay1lbmQvamF2YS8nLFxyXG4gICAgICB9LFxyXG4gICAgXSxcclxuICB9LFxyXG5dXHJcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxcQWRtaW5pc3RyYXRvclxcXFxEZXNrdG9wXFxcXGtlZXAtZG93blxcXFwudml0ZXByZXNzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxBZG1pbmlzdHJhdG9yXFxcXERlc2t0b3BcXFxca2VlcC1kb3duXFxcXC52aXRlcHJlc3NcXFxcc2lkZWJhci50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvQWRtaW5pc3RyYXRvci9EZXNrdG9wL2tlZXAtZG93bi8udml0ZXByZXNzL3NpZGViYXIudHNcIjtpbXBvcnQgcGF0aCBmcm9tICdub2RlOnBhdGgnXG5pbXBvcnQgeyBnZXRBbGxGaWxlcyB9IGZyb20gJy4uL3NyYy91dGlscydcblxuLyoqXG4gKiBcdTRGQTdcdThGQjlcdTY4MEZcdTkxNERcdTdGNkVcbiAqL1xuY29uc3Qgc2lkZWJhcjogUmVjb3JkPHN0cmluZywgYW55W10+ID0ge31cbmNvbnN0IHNpZGViYXJEaXJDb25maWdMaXN0ID0gW1xuICAnL2Zyb250LWVuZC9cdThCRURcdThBMDBcdTY4NDZcdTY3QjZcdTU3RkFcdTc4NDAnLFxuICAnL2Zyb250LWVuZC9cdTU3NTFcdTU3NTFcdTZEM0NcdTZEM0NcdTRFMERcdTVDMTEnLFxuICAnL2JhY2stZW5kL2phdmEnXG5dXG5cbnNpZGViYXJEaXJDb25maWdMaXN0LmZvckVhY2goKHNpZGViYXJJdGVtKSA9PiB7XG4gIGNvbnN0IHNpZGViYXJJdGVtRGlyZWN0b3J5UGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsIGAuLi9zcmMke3NpZGViYXJJdGVtfWApXG4gIGNvbnN0IHNpZGViYXJJdGVtQWxsRmlsZXMgPSBnZXRBbGxGaWxlcyhzaWRlYmFySXRlbURpcmVjdG9yeVBhdGgsIHtcbiAgICBmaWx0ZXI6IC9hc3NldHN8UkVBREVNRS9pXG4gIH0pXG4gIC8vIFx1NTJBOFx1NjAwMVx1ODNCN1x1NTNENlx1NUU3M1x1NTNGMFx1OERFRlx1NUY4NFx1NTIwNlx1OTY5NFx1N0IyNlx1RkYwQ1x1NUU3Nlx1NzUxRlx1NjIxMFx1NkI2M1x1NTIxOVx1ODg2OFx1OEZCRVx1NUYwRlxuICBjb25zdCBzZXAgPSBwYXRoLnNlcC5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpIC8vIFx1OEY2Q1x1NEU0OVx1NTNDRFx1NjU5Q1x1Njc2MFx1NEVFNVx1OTAwMlx1OTE0RFx1NkI2M1x1NTIxOVx1ODg2OFx1OEZCRVx1NUYwRlxuICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYCR7c2VwfXNyYyg/PHJlbGF0aXZlUGF0aD4uKilgKVxuICAvLyBcdTU5MDRcdTc0MDZcdThERUZcdTVGODRcdUZGMENcdTRGN0ZcdTc1MjhcdTZCNjNcdTUyMTlcdTg4NjhcdThGQkVcdTVGMEZcdTUzMzlcdTkxNERcdTVFNzZcdTYzRDBcdTUzRDYgYHNyY2AgXHU1NDBFXHU5NzYyXHU3Njg0XHU4REVGXHU1Rjg0XG4gIGNvbnN0IHJlbGF0aXZlUGF0aHMgPSBzaWRlYmFySXRlbUFsbEZpbGVzLm1hcChcbiAgICAoZmlsZVBhdGgpID0+IGZpbGVQYXRoPy5tYXRjaChyZWdleCk/Lmdyb3Vwcz8ucmVsYXRpdmVQYXRoID8/IGZpbGVQYXRoXG4gIClcbiAgLy8gXHU1MzM5XHU5MTREXHU0RUU1Lm1kXHU3RUQzXHU1QzNFXHU3Njg0XHU2NTg3XHU0RUY2XHU1NDBEXHU1NDhDXHU2MjQwXHU1NzI4XHU0RTBBXHU3RUE3XHU3NkVFXHU1RjU1XHU2NTg3XHU0RUY2XHU1OTM5XHU1NDBEXG4gIGNvbnN0IGZpbGVOYW1lUmVnZXggPSBuZXcgUmVnRXhwKGAoPzxkaXJlY3Rvcnk+W14ke3NlcH1dKykke3NlcH0oPzxmaWxlTmFtZT5bXiR7c2VwfV0rKD89XFwubWQkKSlgKVxuICBjb25zdCBmaWxlTmFtZXMgPSByZWxhdGl2ZVBhdGhzLm1hcCgoaSkgPT4gKHtcbiAgICBsaW5rOiBpLnJlcGxhY2UoL1xcXFwvZywgJy8nKSwgLy8gXHU4RjZDXHU2MzYyXHU2MjEwL1x1NEVFNVx1NTMzOVx1OTE0RHVybFxuICAgIC4uLihpPy5tYXRjaChmaWxlTmFtZVJlZ2V4KT8uZ3JvdXBzIGFzIHtcbiAgICAgIGRpcmVjdG9yeTogc3RyaW5nXG4gICAgICBmaWxlTmFtZTogc3RyaW5nXG4gICAgfSlcbiAgfSkpXG5cbiAgc2lkZWJhcltzaWRlYmFySXRlbV0gPSBbXG4gICAge1xuICAgICAgaXRlbXM6IGZpbGVOYW1lc1xuICAgICAgICAucmVkdWNlKChwcmU6IHN0cmluZ1tdLCBjdXIpID0+IHtcbiAgICAgICAgICBpZiAoY3VyLmRpcmVjdG9yeSAmJiAhcHJlLmluY2x1ZGVzKGN1ci5kaXJlY3RvcnkpKSB7XG4gICAgICAgICAgICBwcmUucHVzaChjdXIuZGlyZWN0b3J5KVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcHJlXG4gICAgICAgIH0sIFtdKVxuICAgICAgICAubWFwKChpKSA9PiAoe1xuICAgICAgICAgIHRleHQ6IGksXG4gICAgICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgICAgIGl0ZW1zOiBmaWxlTmFtZXNcbiAgICAgICAgICAgIC5maWx0ZXIoKGopID0+IGouZGlyZWN0b3J5ID09PSBpKVxuICAgICAgICAgICAgLm1hcCgoaikgPT4gKHtcbiAgICAgICAgICAgICAgdGV4dDogai5maWxlTmFtZSxcbiAgICAgICAgICAgICAgbGluazogai5saW5rXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgfSkpXG4gICAgfVxuICBdXG59KVxuXG5leHBvcnQgZGVmYXVsdCBzaWRlYmFyXG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXEFkbWluaXN0cmF0b3JcXFxcRGVza3RvcFxcXFxrZWVwLWRvd25cXFxcc3JjXFxcXHV0aWxzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxBZG1pbmlzdHJhdG9yXFxcXERlc2t0b3BcXFxca2VlcC1kb3duXFxcXHNyY1xcXFx1dGlsc1xcXFxmaWxlVXRpbC50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvQWRtaW5pc3RyYXRvci9EZXNrdG9wL2tlZXAtZG93bi9zcmMvdXRpbHMvZmlsZVV0aWwudHNcIjtpbXBvcnQgZnMgZnJvbSAnbm9kZTpmcydcclxuaW1wb3J0IHBhdGggZnJvbSAnbm9kZTpwYXRoJ1xyXG5cclxuaW50ZXJmYWNlIElHZXRBbGxGaWxlc09wdGlvbnMge1xyXG4gICAgZmlsdGVyPzogUmVnRXhwIHwgc3RyaW5nIHwgdW5kZWZpbmVkXHJcbiAgICBmaWxlTGlzdD86IHN0cmluZ1tdXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcdTkwMTJcdTVGNTJcdTgzQjdcdTUzRDZcdTYzMDdcdTVCOUFcdTY1ODdcdTRFRjZcdTU5MzlcdTRFMEJcdTc2ODRcdTYyNDBcdTY3MDlcdTY1ODdcdTRFRjZcdThERUZcdTVGODRcclxuICogQHBhcmFtIHtzdHJpbmd9IGRpciBcdTY1ODdcdTRFRjZcdTU5MzlcdThERUZcdTVGODRcclxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSBcdTkxNERcdTdGNkVcdTk4NzlcclxuICogQHBhcmFtIHtzdHJpbmdbXX0gW29wdGlvbnMuZmlsZUxpc3Q9W11dIFx1NUI1OFx1NTBBOFx1NjU4N1x1NEVGNlx1OERFRlx1NUY4NFx1NzY4NFx1NjU3MFx1N0VDNFxyXG4gKiBAcGFyYW0ge1JlZ0V4cCB8IHN0cmluZyB8IHVuZGVmaW5lZH0gW29wdGlvbnMuZmlsdGVyXSBcdThGQzdcdTZFRTRcdTg5QzRcdTUyMTlcclxuICogQHJldHVybnMge3N0cmluZ1tdfSBcdThGRDRcdTU2REVcdTYyNDBcdTY3MDlcdTY1ODdcdTRFRjZcdThERUZcdTVGODRcdTc2ODRcdTY1NzBcdTdFQzRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxGaWxlcyhkaXI6IHN0cmluZywgeyBmaWx0ZXIsIGZpbGVMaXN0ID0gW119OiBJR2V0QWxsRmlsZXNPcHRpb25zID0ge30pOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBmaWxlcyA9IGZzLnJlYWRkaXJTeW5jKGRpcilcclxuICAgIGZpbGVzLmZvckVhY2goZmlsZSA9PiB7XHJcbiAgICAgICAgY29uc3QgZmlsZVBhdGggPSBwYXRoLmpvaW4oZGlyLCBmaWxlKVxyXG4gICAgICAgIGNvbnN0IHN0YXQgPSBmcy5zdGF0U3luYyhmaWxlUGF0aClcclxuXHJcbiAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2MzA3XHU1QjlBXHU0RTg2XHU4RkM3XHU2RUU0XHU4OUM0XHU1MjE5XHU0RTE0XHU1MzM5XHU5MTREXHU1RjUzXHU1MjREXHU2NTg3XHU0RUY2XHU2MjE2XHU3NkVFXHU1RjU1XHVGRjBDXHU1MjE5XHU4REYzXHU4RkM3XHJcbiAgICAgICAgaWYgKGZpbHRlcikge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ3N0cmluZycgJiYgZmlsZS5pbmNsdWRlcyhmaWx0ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZpbHRlciBpbnN0YW5jZW9mIFJlZ0V4cCAmJiBmaWx0ZXIudGVzdChmaWxlUGF0aCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkge1xyXG4gICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTY2MkZcdTY1ODdcdTRFRjZcdTU5MzlcdUZGMENcdTUyMTlcdTkwMTJcdTVGNTJcdTgzQjdcdTUzRDZcdTUxNzZcdTUxODVcdTkwRThcdTY1ODdcdTRFRjZcclxuICAgICAgICAgICAgZ2V0QWxsRmlsZXMoZmlsZVBhdGgsIHtmaWxlTGlzdCwgZmlsdGVyfSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTY2MkZcdTY1ODdcdTRFRjZcdUZGMENcdTUyMTlcdTVDMDZcdTUxNzZcdThERUZcdTVGODRcdTVCNThcdTUxNjVcdTY1NzBcdTdFQzRcclxuICAgICAgICAgICAgZmlsZUxpc3QucHVzaChmaWxlUGF0aClcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGZpbGVMaXN0XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUErVSxTQUFTLG9CQUFvQjs7O0FDQXJDLElBQU8sY0FBUTtBQUFBLEVBQ3BWO0FBQUEsSUFDRSxNQUFNO0FBQUEsSUFDTixPQUFPO0FBQUEsTUFDTDtBQUFBLFFBQ0UsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sYUFBYTtBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDRSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixhQUFhO0FBQUEsTUFDZjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUEsRUFDQTtBQUFBLElBQ0UsTUFBTTtBQUFBLElBQ04sT0FBTztBQUFBLE1BQ0w7QUFBQSxRQUNFLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGFBQWE7QUFBQSxNQUNmO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFDRjs7O0FDMUIrVSxPQUFPQSxXQUFVOzs7QUNBaEIsT0FBTyxRQUFRO0FBQy9WLE9BQU8sVUFBVTtBQWVWLFNBQVMsWUFBWSxLQUFhLEVBQUUsUUFBUSxXQUFXLENBQUMsRUFBQyxJQUF5QixDQUFDLEdBQWE7QUFDbkcsUUFBTSxRQUFRLEdBQUcsWUFBWSxHQUFHO0FBQ2hDLFFBQU0sUUFBUSxVQUFRO0FBQ2xCLFVBQU0sV0FBVyxLQUFLLEtBQUssS0FBSyxJQUFJO0FBQ3BDLFVBQU0sT0FBTyxHQUFHLFNBQVMsUUFBUTtBQUdqQyxRQUFJLFFBQVE7QUFDUixVQUFJLE9BQU8sV0FBVyxZQUFZLEtBQUssU0FBUyxNQUFNLEdBQUc7QUFDckQ7QUFBQSxNQUNKO0FBQ0EsVUFBSSxrQkFBa0IsVUFBVSxPQUFPLEtBQUssUUFBUSxHQUFHO0FBQ25EO0FBQUEsTUFDSjtBQUFBLElBQ0o7QUFFQSxRQUFJLEtBQUssWUFBWSxHQUFHO0FBRXBCLGtCQUFZLFVBQVUsRUFBQyxVQUFVLE9BQU0sQ0FBQztBQUFBLElBQzVDLE9BQU87QUFFSCxlQUFTLEtBQUssUUFBUTtBQUFBLElBQzFCO0FBQUEsRUFDSixDQUFDO0FBQ0QsU0FBTztBQUNYOzs7QUR6Q0EsSUFBTSxtQ0FBbUM7QUFNekMsSUFBTSxVQUFpQyxDQUFDO0FBQ3hDLElBQU0sdUJBQXVCO0FBQUEsRUFDM0I7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNGO0FBRUEscUJBQXFCLFFBQVEsQ0FBQyxnQkFBZ0I7QUFDNUMsUUFBTSwyQkFBMkJDLE1BQUssS0FBSyxrQ0FBVyxTQUFTLFdBQVcsRUFBRTtBQUM1RSxRQUFNLHNCQUFzQixZQUFZLDBCQUEwQjtBQUFBLElBQ2hFLFFBQVE7QUFBQSxFQUNWLENBQUM7QUFFRCxRQUFNLE1BQU1BLE1BQUssSUFBSSxRQUFRLE9BQU8sTUFBTTtBQUMxQyxRQUFNLFFBQVEsSUFBSSxPQUFPLEdBQUcsR0FBRyx3QkFBd0I7QUFFdkQsUUFBTSxnQkFBZ0Isb0JBQW9CO0FBQUEsSUFDeEMsQ0FBQyxhQUFhLFVBQVUsTUFBTSxLQUFLLEdBQUcsUUFBUSxnQkFBZ0I7QUFBQSxFQUNoRTtBQUVBLFFBQU0sZ0JBQWdCLElBQUksT0FBTyxrQkFBa0IsR0FBRyxNQUFNLEdBQUcsaUJBQWlCLEdBQUcsYUFBYztBQUNqRyxRQUFNLFlBQVksY0FBYyxJQUFJLENBQUMsT0FBTztBQUFBLElBQzFDLE1BQU0sRUFBRSxRQUFRLE9BQU8sR0FBRztBQUFBO0FBQUEsSUFDMUIsR0FBSSxHQUFHLE1BQU0sYUFBYSxHQUFHO0FBQUEsRUFJL0IsRUFBRTtBQUVGLFVBQVEsV0FBVyxJQUFJO0FBQUEsSUFDckI7QUFBQSxNQUNFLE9BQU8sVUFDSixPQUFPLENBQUMsS0FBZSxRQUFRO0FBQzlCLFlBQUksSUFBSSxhQUFhLENBQUMsSUFBSSxTQUFTLElBQUksU0FBUyxHQUFHO0FBQ2pELGNBQUksS0FBSyxJQUFJLFNBQVM7QUFBQSxRQUN4QjtBQUNBLGVBQU87QUFBQSxNQUNULEdBQUcsQ0FBQyxDQUFDLEVBQ0osSUFBSSxDQUFDLE9BQU87QUFBQSxRQUNYLE1BQU07QUFBQSxRQUNOLFdBQVc7QUFBQSxRQUNYLE9BQU8sVUFDSixPQUFPLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxFQUMvQixJQUFJLENBQUMsT0FBTztBQUFBLFVBQ1gsTUFBTSxFQUFFO0FBQUEsVUFDUixNQUFNLEVBQUU7QUFBQSxRQUNWLEVBQUU7QUFBQSxNQUNOLEVBQUU7QUFBQSxJQUNOO0FBQUEsRUFDRjtBQUNGLENBQUM7QUFFRCxJQUFPLGtCQUFROzs7QUZyRGYsSUFBTyxpQkFBUSxhQUFhO0FBQUEsRUFDMUIsT0FBTztBQUFBLEVBQ1AsYUFBYTtBQUFBLEVBQ2IsUUFBUTtBQUFBLEVBQ1IsTUFBTTtBQUFBLEVBQ04sTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLEtBQUssUUFBUSxNQUFNLHlCQUF5QixDQUFDLENBQUM7QUFBQSxFQUNoRSxXQUFXO0FBQUEsRUFDWCxpQkFBaUI7QUFBQSxFQUNqQixVQUFVO0FBQUEsSUFDUixXQUFXO0FBQUEsTUFDVCxVQUFVO0FBQUEsTUFDVixjQUFjO0FBQUEsTUFDZCxhQUFhO0FBQUEsTUFDYixXQUFXO0FBQUEsTUFDWCxjQUFjO0FBQUEsSUFDaEI7QUFBQSxJQUNBLE9BQU87QUFBQSxNQUNMLGFBQWE7QUFBQTtBQUFBLElBQ2Y7QUFBQSxFQUNGO0FBQUEsRUFDQSxhQUFhO0FBQUE7QUFBQSxJQUVYO0FBQUEsSUFDQTtBQUFBLElBQ0EsU0FBUztBQUFBLE1BQ1AsT0FBTztBQUFBLE1BQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUFBLElBQ2Q7QUFBQSxJQUNBLGFBQWE7QUFBQSxNQUNYLE1BQU07QUFBQSxNQUNOLGVBQWU7QUFBQSxRQUNiLFdBQVc7QUFBQSxRQUNYLFdBQVc7QUFBQSxNQUNiO0FBQUEsSUFDRjtBQUFBLElBQ0EsUUFBUTtBQUFBLE1BQ04sVUFBVTtBQUFBLElBQ1o7QUFBQSxJQUNBLE1BQU07QUFBQSxJQUNOLFVBQVU7QUFBQSxNQUNSLFNBQVM7QUFBQSxNQUNULE1BQU07QUFBQSxJQUNSO0FBQUEsSUFDQSxhQUFhLENBQUMsRUFBRSxNQUFNLFVBQVUsTUFBTSx3Q0FBd0MsQ0FBQztBQUFBLElBQy9FLFFBQVE7QUFBQSxNQUNOLFNBQVM7QUFBQSxNQUNULFdBQVc7QUFBQSxJQUNiO0FBQUEsRUFDRjtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbInBhdGgiLCAicGF0aCJdCn0K
